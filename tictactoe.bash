#!/bin/bash

# SIMPLE TIC-TAC-TOE GAME
# Two-player only

#=====================================Emil Moquete 22-0969==============================
# SISTEMA DE GESTI√ìN DE JUEGOS TIC-TAC-TOE CON LOGS Y REPORTES
# Descripci√≥n: Este script implementa un sistema completo de gesti√≥n de juegos
# TicTacToe que incluye logging, generaci√≥n de reportes, estad√≠sticas de juego,
# y automatizaci√≥n de tareas relacionadas con el seguimiento de partidas.
#=====================================Emil Moquete 22-0969==============================

# Variables globales del sistema
GRUPO="ALEJANDRO G√ìMEZ (23-0573), EMIL MOQUETE (22-0969), JAVIER JARP (23-0466), JEAN ROQUE (23-0812)"
DESCRIPCION="Sistema de gesti√≥n de juegos TicTacToe con logs y reportes"
DIRECTORIO_ACTUAL=$(pwd)
FECHA_EJECUCION=$(date +%F)
HORA_EJECUCION=$(date +%H:%M:%S)

# Configuraci√≥n de archivos de reporte y logs
BACKUP_DIR="./backups"
REPORTE="$BACKUP_DIR/TicTacToe_Reporte_$(date +%F).txt"
LOG_FILE="$BACKUP_DIR/TicTacToe_Logs_$(date +%F).log"

#==============================Javier Jarp 23-0466===============================
# Game board (1-9 positions)
declare -a board=(" " " " " " " " " " " " " " " " " ")

# Game variables
current_player="X"
player1_name="Player 1"
player2_name="Player 2"

#=====================================Emil Moquete 22-0969==============================
# Funci√≥n para mostrar informaci√≥n inicial del proyecto
mostrar_informacion_inicial() {
    clear
    echo "================================================================"
    echo "                    PROYECTO FINAL SHELL SCRIPTING"
    echo "================================================================"
    echo "Grupo: $GRUPO"
    echo "Descripci√≥n: $DESCRIPCION"
    echo "Directorio de ejecuci√≥n: $DIRECTORIO_ACTUAL"
    echo "Fecha de ejecuci√≥n: $FECHA_EJECUCION"
    echo "Hora de ejecuci√≥n: $HORA_EJECUCION"
    echo "================================================================"
    echo
    
    # Crear directorio de backups si no existe
    if [[ ! -d "$BACKUP_DIR" ]]; then
        mkdir -p "$BACKUP_DIR"
    fi
    
    # Inicializar archivo de reporte
    echo "=== REPORTE DE EJECUCI√ìN - GRUPO ===" > "$REPORTE"
    echo "Fecha: $FECHA_EJECUCION" >> "$REPORTE"
    echo "Hora: $HORA_EJECUCION" >> "$REPORTE"
    echo "Directorio: $DIRECTORIO_ACTUAL" >> "$REPORTE"
    echo "Grupo: $GRUPO" >> "$REPORTE"
    echo "=========================================" >> "$REPORTE"
    echo "" >> "$REPORTE"
    
    # Inicializar archivo de logs
    echo "[$HORA_EJECUCION] Iniciando sistema de gesti√≥n de juegos" > "$LOG_FILE"
    echo "[$HORA_EJECUCION] Grupo: $GRUPO" >> "$LOG_FILE"
    echo "[$HORA_EJECUCION] Directorio: $DIRECTORIO_ACTUAL" >> "$LOG_FILE"
    
    echo "Creando directorio de backups ----" >> "$REPORTE"
    echo "Inicializando sistema de reportes ----" >> "$REPORTE"
    echo "Sistema inicializado correctamente ----" >> "$REPORTE"
}

# Funci√≥n para logging de eventos
log_event() {
    local mensaje="$1"
    local timestamp=$(date +%H:%M:%S)
    echo "[$timestamp] $mensaje" >> "$LOG_FILE"
}

# Funci√≥n para agregar al reporte
agregar_reporte() {
    local mensaje="$1"
    echo "$mensaje" >> "$REPORTE"
}

#==============================Alejandro G√≥mez 23-0573===============================
# Funci√≥n para mostrar el men√∫ principal
mostrar_menu_principal() {
    clear
    echo "================================================================"
    echo "                    MEN√ö PRINCIPAL - TIC TAC TOE"
    echo "================================================================"
    echo "Grupo: $GRUPO"
    echo "================================================================"
    echo ""
    echo "Seleccione una opci√≥n:"
    echo ""
    echo "1) Jugar Tic-Tac-Toe"
    echo "2) Ver reglas del juego"
    echo "3) Ver estad√≠sticas de juegos"
    echo "4) Ver logs del sistema"
    echo "5) Ver reporte del sistema"
    echo "6) Limpiar logs y reportes"
    echo "7) Informaci√≥n del proyecto"
    echo "8) Salir del programa"
    echo ""
    echo "================================================================"
    echo -n "Ingrese su opci√≥n [1-8]: "
}

# Funci√≥n para mostrar las reglas del juego
mostrar_reglas() {
    clear
    echo "================================================================"
    echo "                    REGLAS DEL TIC-TAC-TOE"
    echo "================================================================"
    echo ""
    echo "OBJETIVO:"
    echo "El objetivo es conseguir tres s√≠mbolos iguales en l√≠nea"
    echo "(horizontal, vertical o diagonal)."
    echo ""
    echo "REGLAS:"
    echo "‚Ä¢ El juego se desarrolla en un tablero de 3x3 casillas"
    echo "‚Ä¢ Los jugadores se turnan para colocar sus s√≠mbolos (X y O)"
    echo "‚Ä¢ El Jugador 1 siempre utiliza 'X' y comienza primero"
    echo "‚Ä¢ El Jugador 2 utiliza 'O'"
    echo "‚Ä¢ Para hacer un movimiento, ingrese un n√∫mero del 1 al 9"
    echo "‚Ä¢ Los n√∫meros corresponden a las posiciones del tablero:"
    echo ""
    echo "     |     |     "
    echo "  1  |  2  |  3  "
    echo "_____|_____|_____"
    echo "     |     |     "
    echo "  4  |  5  |  6  "
    echo "_____|_____|_____"
    echo "     |     |     "
    echo "  7  |  8  |  9  "
    echo "     |     |     "
    echo ""
    echo "CONDICIONES DE VICTORIA:"
    echo "‚Ä¢ Tres s√≠mbolos iguales en una fila horizontal"
    echo "‚Ä¢ Tres s√≠mbolos iguales en una columna vertical"
    echo "‚Ä¢ Tres s√≠mbolos iguales en una diagonal"
    echo ""
    echo "El juego termina en empate si se llenan todas las casillas"
    echo "sin que ning√∫n jugador consiga tres en l√≠nea."
    echo ""
    echo "================================================================"
    echo "Presione ENTER para volver al men√∫ principal..."
    read
    log_event "Usuario consult√≥ las reglas del juego"
}

# Funci√≥n para mostrar estad√≠sticas b√°sicas
mostrar_estadisticas() {
    clear
    echo "================================================================"
    echo "                   ESTAD√çSTICAS DEL SISTEMA"
    echo "================================================================"
    echo ""
    
    if [[ -f "$LOG_FILE" ]]; then
        local total_juegos=$(grep -c "Configuraci√≥n de jugadores" "$LOG_FILE" 2>/dev/null || echo "0")
        local victorias_x=$(grep -c "Victoria de.*X)" "$LOG_FILE" 2>/dev/null || echo "0")
        local victorias_o=$(grep -c "Victoria de.*O)" "$LOG_FILE" 2>/dev/null || echo "0")
        local empates=$(grep -c "Juego empatado" "$LOG_FILE" 2>/dev/null || echo "0")
        local movimientos_invalidos=$(grep -c "Movimiento inv√°lido" "$LOG_FILE" 2>/dev/null || echo "0")
        
        echo "üìä ESTAD√çSTICAS GENERALES:"
        echo "   ‚Ä¢ Total de juegos iniciados: $total_juegos"
        echo "   ‚Ä¢ Victorias del Jugador X: $victorias_x"
        echo "   ‚Ä¢ Victorias del Jugador O: $victorias_o"
        echo "   ‚Ä¢ Juegos empatados: $empates"
        echo "   ‚Ä¢ Movimientos inv√°lidos: $movimientos_invalidos"
        echo ""
        
        if [[ $total_juegos -gt 0 ]]; then
            local juegos_completados=$((victorias_x + victorias_o + empates))
            echo "üìà AN√ÅLISIS:"
            echo "   ‚Ä¢ Juegos completados: $juegos_completados de $total_juegos"
            echo "   ‚Ä¢ Porcentaje de victorias X: $(( (victorias_x * 100) / (juegos_completados > 0 ? juegos_completados : 1) ))%"
            echo "   ‚Ä¢ Porcentaje de victorias O: $(( (victorias_o * 100) / (juegos_completados > 0 ? juegos_completados : 1) ))%"
            echo "   ‚Ä¢ Porcentaje de empates: $(( (empates * 100) / (juegos_completados > 0 ? juegos_completados : 1) ))%"
        fi
    else
        echo "‚ùå No se encontraron logs del sistema."
        echo "   Inicie al menos un juego para ver estad√≠sticas."
    fi
    
    echo ""
    echo "================================================================"
    echo "Presione ENTER para volver al men√∫ principal..."
    read
    log_event "Usuario consult√≥ las estad√≠sticas del sistema"
}

# Funci√≥n para mostrar los logs del sistema
mostrar_logs() {
    clear
    echo "================================================================"
    echo "                     LOGS DEL SISTEMA"
    echo "================================================================"
    echo ""
    
    if [[ -f "$LOG_FILE" ]]; then
        echo "üìÑ Contenido del archivo de logs ($LOG_FILE):"
        echo ""
        cat "$LOG_FILE"
    else
        echo "‚ùå No se encontr√≥ el archivo de logs."
    fi
    
    echo ""
    echo "================================================================"
    echo "Presione ENTER para volver al men√∫ principal..."
    read
    log_event "Usuario consult√≥ los logs del sistema"
}

# Funci√≥n para mostrar el reporte del sistema
mostrar_reporte() {
    clear
    echo "================================================================"
    echo "                   REPORTE DEL SISTEMA"
    echo "================================================================"
    echo ""
    
    if [[ -f "$REPORTE" ]]; then
        echo "üìã Contenido del reporte ($REPORTE):"
        echo ""
        cat "$REPORTE"
    else
        echo "‚ùå No se encontr√≥ el archivo de reporte."
    fi
    
    echo ""
    echo "================================================================"
    echo "Presione ENTER para volver al men√∫ principal..."
    read
    log_event "Usuario consult√≥ el reporte del sistema"
}

# Funci√≥n para limpiar logs y reportes
limpiar_logs_reportes() {
    clear
    echo "================================================================"
    echo "                 LIMPIAR LOGS Y REPORTES"
    echo "================================================================"
    echo ""
    echo "‚ö†Ô∏è  ADVERTENCIA:"
    echo "Esta acci√≥n eliminar√° todos los logs y reportes actuales."
    echo "Esta acci√≥n NO se puede deshacer."
    echo ""
    echo -n "¬øEst√° seguro que desea continuar? (s/N): "
    read confirmacion
    
    case $confirmacion in
        "s"|"S"|"si"|"Si"|"SI")
            if [[ -f "$LOG_FILE" ]]; then
                rm "$LOG_FILE"
                echo "‚úÖ Archivo de logs eliminado."
            fi
            
            if [[ -f "$REPORTE" ]]; then
                rm "$REPORTE"
                echo "‚úÖ Archivo de reporte eliminado."
            fi
            
            # Reinicializar archivos
            echo "[$HORA_EJECUCION] Sistema reiniciado - Logs limpiados por el usuario" > "$LOG_FILE"
            echo "=== REPORTE DE EJECUCI√ìN - GRUPO ===" > "$REPORTE"
            echo "Fecha: $FECHA_EJECUCION" >> "$REPORTE"
            echo "Sistema reiniciado - Logs limpiados ----" >> "$REPORTE"
            
            echo "‚úÖ Logs y reportes limpiados exitosamente."
            echo "‚úÖ Archivos reinicializados."
            log_event "Usuario limpi√≥ logs y reportes del sistema"
            ;;
        *)
            echo "‚ùå Operaci√≥n cancelada."
            ;;
    esac
    
    echo ""
    echo "Presione ENTER para volver al men√∫ principal..."
    read
}

# Funci√≥n para mostrar informaci√≥n del proyecto
mostrar_info_proyecto() {
    clear
    echo "================================================================"
    echo "                 INFORMACI√ìN DEL PROYECTO"
    echo "================================================================"
    echo ""
    echo "üéì PROYECTO FINAL - SHELL SCRIPTING"
    echo ""
    echo "üë• INTEGRANTES DEL GRUPO:"
    echo "   ‚Ä¢ Alejandro G√≥mez (23-0573) - Men√∫ Principal y Navegaci√≥n"
    echo "   ‚Ä¢ Emil Moquete (22-0969) - Sistema de Logs y Reportes"
    echo "   ‚Ä¢ Javier Jarp (23-0466) - L√≥gica del Juego y Interfaz"
    echo "   ‚Ä¢ Jean Roque (23-0812) - Control de Jugadores y Movimientos"
    echo ""
    echo "üìù DESCRIPCI√ìN:"
    echo "   Sistema completo de gesti√≥n de juegos Tic-Tac-Toe que incluye"
    echo "   logging detallado, generaci√≥n de reportes, estad√≠sticas de"
    echo "   juego y automatizaci√≥n de tareas relacionadas con el"
    echo "   seguimiento de partidas."
    echo ""
    echo "üõ†Ô∏è  CARACTER√çSTICAS:"
    echo "   ‚Ä¢ Juego interactivo de Tic-Tac-Toe para dos jugadores"
    echo "   ‚Ä¢ Sistema de logging autom√°tico de eventos"
    echo "   ‚Ä¢ Generaci√≥n de reportes detallados"
    echo "   ‚Ä¢ Estad√≠sticas de juegos y movimientos"
    echo "   ‚Ä¢ Interfaz de men√∫ intuitiva"
    echo "   ‚Ä¢ Gesti√≥n de archivos de respaldo"
    echo ""
    echo "üìÇ ARCHIVOS GENERADOS:"
    echo "   ‚Ä¢ Logs: $LOG_FILE"
    echo "   ‚Ä¢ Reportes: $REPORTE"
    echo "   ‚Ä¢ Directorio: $BACKUP_DIR"
    echo ""
    echo "üìÖ FECHA DE EJECUCI√ìN: $FECHA_EJECUCION"
    echo "üïê HORA DE EJECUCI√ìN: $HORA_EJECUCION"
    echo "üìÅ DIRECTORIO ACTUAL: $DIRECTORIO_ACTUAL"
    echo ""
    echo "================================================================"
    echo "Presione ENTER para volver al men√∫ principal..."
    read
    log_event "Usuario consult√≥ informaci√≥n del proyecto"
}

# Funci√≥n principal del men√∫
ejecutar_menu_principal() {
    while true; do
        mostrar_menu_principal
        read opcion
        
        case $opcion in
            1)
                log_event "Usuario seleccion√≥ opci√≥n 1: Jugar Tic-Tac-Toe"
                iniciar_juego
                ;;
            2)
                log_event "Usuario seleccion√≥ opci√≥n 2: Ver reglas"
                mostrar_reglas
                ;;
            3)
                log_event "Usuario seleccion√≥ opci√≥n 3: Ver estad√≠sticas"
                mostrar_estadisticas
                ;;
            4)
                log_event "Usuario seleccion√≥ opci√≥n 4: Ver logs"
                mostrar_logs
                ;;
            5)
                log_event "Usuario seleccion√≥ opci√≥n 5: Ver reporte"
                mostrar_reporte
                ;;
            6)
                log_event "Usuario seleccion√≥ opci√≥n 6: Limpiar logs"
                limpiar_logs_reportes
                ;;
            7)
                log_event "Usuario seleccion√≥ opci√≥n 7: Informaci√≥n del proyecto"
                mostrar_info_proyecto
                ;;
            8)
                log_event "Usuario seleccion√≥ opci√≥n 8: Salir del programa"
                clear
                echo "================================================================"
                echo "                    GRACIAS POR USAR EL SISTEMA"
                echo "================================================================"
                echo ""
                echo "üéÆ Gracias por jugar Tic-Tac-Toe!"
                echo "üìä Los logs y reportes han sido guardados en: $BACKUP_DIR"
                echo ""
                echo "üë• Desarrollado por: $GRUPO"
                echo ""
                echo "¬°Hasta la pr√≥xima! üëã"
                echo ""
                agregar_reporte "Sistema finalizado desde el men√∫ principal ----"
                log_event "Sistema finalizado desde el men√∫ principal"
                exit 0
                ;;
            *)
                clear
                echo "‚ùå Opci√≥n inv√°lida. Por favor seleccione una opci√≥n del 1 al 8."
                echo "Presione ENTER para continuar..."
                read
                log_event "Usuario ingres√≥ opci√≥n inv√°lida: $opcion"
                ;;
        esac
    done
}
#==============================Alejandro G√≥mez 23-0573===============================

#==============================Javier Jarp 23-0466===============================
clear_screen() {
    clear
}
#==============================Javier Jarp 23-0466===============================
print_header() {
    clear_screen
    echo "=================================="
    echo "         TIC-TAC-TOE GAME         "
    echo "=================================="
    echo
}
#==============================Javier Jarp 23-0466===============================
draw_board() {
    echo "     |     |     "
    echo "  ${board[0]}  |  ${board[1]}  |  ${board[2]}  "
    echo "_____|_____|_____"
    echo "     |     |     "
    echo "  ${board[3]}  |  ${board[4]}  |  ${board[5]}  "
    echo "_____|_____|_____"
    echo "     |     |     "
    echo "  ${board[6]}  |  ${board[7]}  |  ${board[8]}  "
    echo "     |     |     "
    echo
}
#==============================Javier Jarp 23-0466===============================
draw_reference_board() {
    echo "Position numbers:"
    echo "     |     |     "
    echo "  1  |  2  |  3  "
    echo "_____|_____|_____"
    echo "     |     |     "
    echo "  4  |  5  |  6  "
    echo "_____|_____|_____"
    echo "     |     |     "
    echo "  7  |  8  |  9  "
    echo "     |     |     "
    echo
}
#==============================Javier Jarp 23-0466===============================
show_current_player() {
    if [[ $current_player == "X" ]]; then
        echo "$player1_name's turn (X)"
    else
        echo "$player2_name's turn (O)"
    fi
    echo
}
#==============================Javier Jarp 23-0466===============================
check_winner() {
    # Check rows
    for i in 0 3 6; do
        if [[ ${board[$i]} != " " && ${board[$i]} == ${board[$((i+1))]} && ${board[$i]} == ${board[$((i+2))]} ]]; then
            return 0
        fi
    done
    
    # Check columns
    for i in 0 1 2; do
        if [[ ${board[$i]} != " " && ${board[$i]} == ${board[$((i+3))]} && ${board[$i]} == ${board[$((i+6))]} ]]; then
            return 0
        fi
    done
    
    # Check diagonals
    if [[ ${board[0]} != " " && ${board[0]} == ${board[4]} && ${board[0]} == ${board[8]} ]]; then
        return 0
    fi
    
    if [[ ${board[2]} != " " && ${board[2]} == ${board[4]} && ${board[2]} == ${board[6]} ]]; then
        return 0
    fi
    
    return 1
}
#==============================Javier Jarp 23-0466===============================
check_draw() {
    for cell in "${board[@]}"; do
        if [[ $cell == " " ]]; then
            return 1
        fi
    done
    return 0
}

#=====================================Emil Moquete 22-0969==============================
# Funci√≥n para realizar movimiento con logging
make_move() {
    local position=$1
    local index=$((position - 1))
    
    # Check if position is valid
    if [[ $position -lt 1 || $position -gt 9 ]]; then
        log_event "Movimiento inv√°lido: posici√≥n $position fuera de rango"
        return 1
    fi
    
    # Check if position is empty
    if [[ ${board[$index]} != " " ]]; then
        log_event "Movimiento inv√°lido: posici√≥n $position ya ocupada"
        return 1
    fi
    
    # Make the move
    board[$index]=$current_player
    log_event "Jugador $current_player movi√≥ a posici√≥n $position"
    return 0
}

#==============================Jean Roque 23-0812===============================
get_player_move() {
    while true; do
        echo -n "Enter position (1-9): "
        read input
        
        case $input in
            [1-9])
                if make_move "$input"; then
                    return 0
                else
                    echo "Position $input is already taken! Try again."
                fi
                ;;
            *)
                echo "Invalid input! Enter a number 1-9."
                log_event "Entrada inv√°lida del usuario: $input"
                ;;
        esac
    done
}

#==============================Jean Roque 23-0812===============================
switch_player() {
    if [[ $current_player == "X" ]]; then
        current_player="O"
    else
        current_player="X"
    fi
    log_event "Cambio de turno a jugador $current_player"
}

#==============================Jean Roque 23-0812===============================
reset_game() {
    board=(" " " " " " " " " " " " " " " " " ")
    current_player="X"
    log_event "Juego reiniciado"
}

#=====================================Emil Moquete 22-0969==============================
# Funci√≥n para configurar jugadores con logging
setup_players() {
    echo -n "Enter Player 1 name (X): "
    read player1_name
    if [[ -z "$player1_name" ]]; then
        player1_name="Player 1"
    fi
    
    echo -n "Enter Player 2 name (O): "
    read player2_name
    if [[ -z "$player2_name" ]]; then
        player2_name="Player 2"
    fi
    
    echo
    echo "Game setup: $player1_name (X) vs $player2_name (O)"
    echo "Press ENTER to start..."
    read
    
    log_event "Configuraci√≥n de jugadores: $player1_name vs $player2_name"
    agregar_reporte "Configurando jugadores del juego ----"
}

play_game() {
    while true; do
        print_header
        echo "$player1_name (X) vs $player2_name (O)"
        echo
        
        draw_board
        show_current_player
        draw_reference_board
        
        get_player_move
        
        # Check for winner
        if check_winner; then
            print_header
            draw_board
            
            if [[ $current_player == "X" ]]; then
                echo "üéâ $player1_name wins! üéâ"
                log_event "Victoria de $player1_name (X)"
                agregar_reporte "Juego terminado - Victoria de $player1_name ----"
            else
                echo "üéâ $player2_name wins! üéâ"
                log_event "Victoria de $player2_name (O)"
                agregar_reporte "Juego terminado - Victoria de $player2_name ----"
            fi
            break
            
        elif check_draw; then
            print_header
            draw_board
            echo "ü§ù It's a draw! Good game!"
            log_event "Juego empatado"
            agregar_reporte "Juego terminado - Empate ----"
            break
        else
            switch_player
        fi
    done
}

ask_play_again() {
    echo
    echo -n "Play again? (y/n): "
    read answer
    
    case $answer in
        "y"|"Y"|"yes"|"Yes")
            log_event "Usuario eligi√≥ jugar otra partida"
            return 0
            ;;
        *)
            log_event "Usuario eligi√≥ terminar el juego"
            return 1
            ;;
    esac
}

#==============================Alejandro G√≥mez 23-0573===============================
# Funci√≥n para iniciar el juego desde el men√∫
iniciar_juego() {
    print_header
    echo "Welcome to Tic-Tac-Toe!"
    echo
    
    setup_players
    
    while true; do
        reset_game
        play_game
        
        if ! ask_play_again; then
            echo "Thanks for playing!"
            echo "Returning to main menu..."
            agregar_reporte "Regresando al men√∫ principal ----"
            log_event "Regresando al men√∫ principal desde el juego"
            sleep 2
            break
        fi
    done
}
#==============================Alejandro G√≥mez 23-0573===============================

#=====================================Emil Moquete 22-0969==============================
# Funci√≥n principal del programa - MODIFICADA para integrar el men√∫
main() {
    mostrar_informacion_inicial
    
    echo ""
    echo "Presiona ENTER para continuar al men√∫ principal..."
    read
    
    # Ejecutar el men√∫ principal en lugar de ir directo al juego
    ejecutar_menu_principal
}

# Ejecutar programa principal
main
